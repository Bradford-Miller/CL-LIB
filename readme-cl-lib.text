;; Time-stamp: <2007-05-18 11:10:21 miller>;; CVS: $Id: readme-cl-lib.text,v 1.1.1.1 2007/11/19 17:19:09 gorbag Exp $ORIGINAL README:CL-LIB is a collection of lisp packages and routines that I've found useful over my Common Lisp code authoring career(since 1986) and in some cases derives from lisp code I have written during my Franz lisp and Zetalisp days prior tothat (since 1982).:cl-lib is a compilable loadable system (once you load cl-lib/defsystem), and is compatible with allegro 4.1 thru 5.0(the latest version I have) though it probably will work with later versions as well.  I've also succesfully used it(the minimal-cl-lib) with MCL, versions 3.0 through version 5.0 (Again, the latest version I have), and Lispworks v4.1through version 4.4.5In particular, cl-lib has files that:Extend particular vendor lisps:extend allegro's defsystem with edit-system and provide example-modules (loadable but not compilable files); See thedirectory allegoextend other lisps such as MCL, LispWorks in their respective directoriesA variety of library functions (see directory functions) that extend the massive library "built in" to common lisp, withother frequently reused code or markup.A series of separarable "packages" (see packages directory) that include:An initializations package similar to what was available on MIT lisp machine descendants. This lets you declare code tobe run at certain prespecified times, either directly under programmer control, or during startup, before GC, etc.Some additional compatibility functions wrt processes between allegro and symbolics (see compatibility/process.lisp)re to dfa converter (re-to-dfa.lisp) (Regular Expression to Deterministic Finite Automaton)A version of lisp-machine resources for any CL (puts you in control of memeory management). See resources.lisp Even withmodern GC, you may find structures that are "expensive" to initialize and are frequently reused can benefit from thiscode. It also may allow you to move the initialization cost to compile-time.A transcription package which makes it easy to convert your format statements to something that can be captured during aprogram run into a file, and optionally depend on a global debug level.Packages for specialized algorithms, including triangular matrices and charts, which are further described in theirindividual files.If you have any problems with these tools, I'd like to hear about it. In addition there are a variety of pd/freewaretools available in this directory the I **don't** maintain, but these files should point to the owner.6/23/05 DIRECTORY ORGANIZATION UPDATEI've reorganized the directory and files (e.g., packages) to make certain tools easier to find and break out so theentire library doesn't need to be loaded.There are now subdirectories for each major lisp implementation with implementation specific functions and packagesmoved there. Other functions may have implementation dependencies, but will generally work in all implementations ifloaded.There is a new subdirectory 'packages' for files that implement a packaged functionality (e.g., regular expressionmatching, or resources).There is another new subdirectory 'functions' for files that implement individual functions and macros (that is, eachfunction or macro is in some sense stand-alone).This should make it easier to load only the functionality of interest for a particular project. In particular, each ofthe "packages" have their own defsystem, and routines that are necessary for anything are combined intofunctions/cl-lib-essentials.lisp, and loaded along with package information with (load-system :cl-lib-essentials).