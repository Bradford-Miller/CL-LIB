;; Time-stamp: <2012-01-05 17:41:04 millerb>     ;;; OBSOLETE!;;; Note new defsystem-lispworks.lisp which has references to the new file-refactoring.;;;;;; New versions for other platforms should be straightforward based on that file (essentially only needs ported for the ;;; native defsystem for that platform);;;;;; BWM 6/2005(DECLAIM (OPTIMIZE (SPEED 2) (SAFETY 1) (DEBUG 1)));; miller - Brad Miller (miller@cs.rochester.edu) (now bradford.w.miller@gmail.com);; Miminal version of cl-lib (for ttrains application dumping), no series, query-p, prompt-and-read, triangular matrices;; also no process patches, reader, re-dfa, string-io-stream, init-extras;;; For a History of recent changes, see the file cl-lib-news in this directory.(defpackage cl-lib  (:use common-lisp)  (:export #:command-line-arg #:force-list  #:flatten #:*cl-lib-version*           ;; clim-extensions.lisp           #+(AND CLIM (NOT LISPWORKS))           #:frame-pane           ;;           cl-sets.lisp           #:list-without-nulls #:cartesian-product #:cross-product 	   #:permutations #:powerset #:circular-list           #:seq-butlast #:seq-last #:dosequence	   #:prefix?	   #:force-string #:elapsed-time-in-seconds	   #:factorial #:round-to 	   #:extract-keyword #:truncate-keywords #:remove-keyword-arg	   #:update-alist #:msetq #:mlet #:while #:while-not #:let*-non-null	   #:cond-binding-predicate-to 	   #:mapc-dotted-list #:mapcar-dotted-list #:mapcan-dotted-list #:maplist-dotted-list	   #:some-dotted-list #:every-dotted-list	   #:copy-hash-table	   #:defclass-x #:defflag #:defflags #:let-maybe	   #:eqmemb #-MCL #:neq #:car-eq #:dremove #:displace #:tailpush 	   #:explode #:implode #:crush	   #:listify-string #:listify 	   #:and-list #:or-list           #:make-variable #:variablep	   #:dofile #:copy-array                      #-excl #:if*           #-(or excl lispworks) #:*keyword-package*	   #+excl #:raw-read-char	   #+excl #:raw-peek-char           #+excl #:raw-read-char-no-hang	   #:make-plist 	   #:make-keyword	   #:internal-real-time-in-seconds #:read-char-wait            	   #:flags #:add-initialization #:initializations #:delete-initialization #:reset-initializations	   #:*cold-initialization-list* #:*warm-initialization-list* #:*once-initialization-list*	   #:*gc-initialization-list* #:*before-cold-initialization-list* #:*after-gc-initialization-list*	   #:*initialization-keywords*           #:read-delimited-string #:mapatoms           #:reverse-alist #:fast-union #:fast-intersection           #:true-list-p #:progfoo #:foo #:mv-progfoo #:mv-foo #:with-rhyme           #:get-compiled-function-name #:fast-read-char #:fast-read-file-char                      ;; better-errors.lisp           #:warn-or-error #:*general-warning-list* #:*warn-or-error-cleanup-initializations*           #:check	   #:parser-error           ;; resources.lisp	   #-LispWorks #:defresource 	   #-LispWorks #:allocate-resource 	   #-LispWorks #:deallocate-resource 	   #-LispWorks #:clear-resource 	   #-LispWorks #:map-resource 	   #-LispWorks #:with-resource                      #+excl #:edit-system            #:macro-indent-rule           #:alist #:comment           #:xor #:eqv #:nand #:nor           #:load-once #:clear-load-once                      ;; locatives.lisp           #:locf #:location-contents #:locative-p #:locative           ;; nregex.lisp           #:regex #:regex-compile           ;; prompt-and-read           #+clim #:popup-read-form #+clim #:popup-error #:prompt-and-read #:prompt-for            #+clim #:convert-to-presentation-type #+clim #:convert-satisfies-to-presentation-type            #+clim #:*default-presentation-type* #+clim #:clim-prompt-for #+clim #:clim-prompt-for-with-default           #:*suppress-clim*           ;; clos-extensions           #:make-load-form-with-all-slots #:determine-slot-readers #:determine-slot-writers #:determine-slot-initializers           #:generate-legal-slot-initargs #:*load-form-quote-p-fn*                      ;; syntax           #:add-syntax #:with-syntax #:set-syntax           ;; scheme-streams           #:scheme-delay #:scheme-delay-p #:scheme-force #:scheme-stream           #:ss-head #:ss-tail #:cons-scheme-stream #:make-scheme-stream            #:list-scheme-stream #:rlist-to-scheme-stream #:fake-scheme-delay           #:scheme-stream-p #:scheme-stream-head #:scheme-stream-tail           #:scheme-stream-tail-closure-p                      ;; queues           #:make-queue #:queue-elements #:empty-queue-p #:queue-front #:dequeue #:enqueue #:safe-dequeue           ))#+excl(find-package 'defsystem)               ; will force auto-load#+excl(excl:defsystem :cl-lib    (:default-pathname "/cyc/projects/dialog/agents/lib/cl-lib/"     :pretty-name "Common Lisp Library"     )  (:module version ("cl-lib-version"))  (:module fix-allegro ("allegro-patches"))  (:module init ("initializations")           (:load-before-compile fix-allegro))  (:module basic-extensions ("cl-extensions" "cl-sets" "more-extensions" "scheme-streams" "queues" #+clim "clim-extensions")           (:load-before-compile fix-allegro init))  (:module clos-extensions ("clos-extensions")           (:load-before-compile fix-allegro init basic-extensions))  (:module more-ui ("better-errors" "prompt-and-read")           (:load-before-compile fix-allegro init basic-extensions clos-extensions))  (:module more-libraries ("locatives" "syntax")           (:load-before-compile fix-allegro init basic-extensions clos-extensions))  (:module more-allegro ("allegro-stuff")           (:load-before-compile fix-allegro init basic-extensions clos-extensions more-libraries))  (:module advanced-tools ("nregex")           (:load-before-compile fix-allegro init basic-extensions clos-extensions more-allegro))  (:module resources ("resources")           (:load-before-compile fix-allegro init basic-extensions clos-extensions more-allegro))  (:module charts ("chart")           (:load-before-compile fix-allegro basic-extensions clos-extensions))  (:module logs "transcripts"           (:load-before-compile fix-allegro basic-extensions))  )#+mk-defsystem(defsystem :cl-lib    ;; these are correct for my mac  :source-pathname "Slaymore:Lisp:TRAINS:cl-lib:"  :binary-pathname "Slaymore:Lisp:TRAINS:cl-lib:"  :components (               (:module version                         :source-pathname ""                        :components ("cl-lib-version"))               (:module init                         :source-pathname ""                        :components ("initializations"))               (:module basic-extensions                        :source-pathname ""                        :components ("cl-extensions" "cl-sets" "more-extensions" "clos-extensions" "scheme-streams" "queues" #+clim "clim-extensions")                        :depends-on (init))               (:module more-ui                         :source-pathname ""                        :components ("better-errors" "prompt-and-read")                        :depends-on (init basic-extensions))               (:module more-libraries                        :source-pathname ""                        :components ("syntax")                        :depends-on (init basic-extensions))               (:module charts                         :source-pathname ""                        :components ("chart")                        :depends-on (basic-extensions))               (:module resources                        :source-pathname ""                        :components ("resources")                        :depends-on (init basic-extensions))))#+(and defsystem (not lispworks))(clim-defsys:defsystem :cl-lib    (:default-pathname (pathname "cl-lib:")     :default-binary-pathname (pathname "cl-lib:")     #||:pretty-name "Common Lisp Library"||#     )  ( "cl-lib-version")  ( "initializations")  ( "scheme-streams")  ( "queues")  ( "cl-extensions" :load-before-compile ("initializations"))  ( "cl-sets" :load-before-compile ("initializations" "cl-extensions"))  ( "more-extensions" :load-before-compile ("initializations" "cl-extensions" "cl-sets"))  ( "MCL-mop"    :load-before-compile ("initializations" "cl-extensions" "cl-sets"))  ( "MCL-CLOS"    :load-before-compile ("MCL-mop" "initializations" "cl-extensions" "cl-sets"))  ( "clos-extensions"    :load-before-compile ("MCL-CLOS" "MCL-mop" "initializations" "cl-extensions" "cl-sets"))  ( "better-errors"     :load-before-compile ("initializations" "cl-extensions" "cl-sets"))  ( "prompt-and-read"    :load-before-compile ("initializations" "cl-extensions" "cl-sets" "better-errors"))  ( "locatives"    :load-before-compile ("initializations" "cl-extensions" "cl-sets"))  ( "syntax"    :load-before-compile ("initializations" "cl-extensions" "cl-sets"))  ( "nregex"    :load-before-compile ("initializations" "cl-extensions" "cl-sets"))  ( "resources"    :load-before-compile ("initializations" "cl-extensions" "cl-sets"))  ( "chart"    :load-before-compile ("initializations" "cl-extensions" "cl-sets"))  ( "transcripts"    :load-before-compile ("initializations" "cl-extensions" "cl-sets"))  ( "MCL-TimeStamp"    :load-before-compile ("cl-extensions"))  #+clim ( "clim-extensions" )  )#+lispworks(defsystem :cl-lib    (:default-pathname #-win32 "~/Documents/Lisp/CL-LIB/"                       #+win32 "C:\\Documents and Settings\\millerbw\\My Documents\\Lisp\\CL-LIB\\"     :documentation "Common Lisp Library"     )  :members(           "cl-lib-version"           "initializations"           "cl-extensions" "cl-sets" "more-extensions" "scheme-streams" "queues"           "clos-extensions"           "better-errors" "prompt-and-read"           "locatives" "syntax"           "nregex"           "chart"           "transcripts"           #+clim           "clim-extensions")  :rules (          (:in-order-to :compile :all (:requires (:load :previous)))          ))#-(or defsystem excl mk-defsystem lispworks)(eval-when (compile load eval)  (error "Non-allegro / mk / clim / lispworks defsystems are not currently supported. Please port and send us a copy with your implementation *features*."))#-cl-lib(push :cl-lib *features*)               ; for portably portable code (:-)